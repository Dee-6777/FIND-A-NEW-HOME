# -*- coding: utf-8 -*-
"""House Price Prediction using Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Dee-6777/HOUSE-PRICE-PREDICTION-USING-LINEAR-REGRESSION/blob/main/House_Price_Prediction_using_Linear_Regression.ipynb

# Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

"""# Problem statement

* You have been given a dataset that describes the functionality of houses. Now, based on the given features, you have to predict the house price.

# Defining a DataFrame

Link: https://drive.google.com/file/d/1yrVwfX1LjISQ6vdR1Kaht-S1_8y2Gk6z/view?usp=sharing
"""

df = pd.read_csv('/content/drive/MyDrive/ShapeAI DST 11021 Oct-Jan Batch 2021-22/Datasets/Housing.csv')

"""# EDA - Exploratory Data Analysis"""

df.head()

df.tail()

df.shape[0]

df.shape[1]

len(df.columns)

df.columns

df.head()

df.info()

df.dtypes

df.nunique()

df.isnull().sum()

df.isnull().sum().sum()

df.head()

price.      strength

10             2
100            3
1000           4

df.mainroad.unique()

df.mainroad.value_counts()

# Yes -> 1
# No -> 0

newdf = df.copy()

# Mainroad
df.mainroad.replace(['yes','no'],[1,0], inplace=True)

df.mainroad.dtypes

df.guestroom.unique()

df.guestroom.value_counts()

# Guestroom
df.guestroom.replace(['yes','no'],[1,0], inplace=True)

df.guestroom.value_counts()

df.basement.unique()

df.basement.value_counts()

# Basement
df.basement.replace(['yes','no'],[1,0], inplace=True)

# hotwaterheating
df.hotwaterheating.replace(['yes','no'],[1,0], inplace=True)

# airconditioning
df.airconditioning.replace(['yes','no'],[1,0], inplace=True)

# prefarea
df.prefarea.replace(['yes','no'],[1,0], inplace=True)

df.head()

df.furnishingstatus.unique()

df.furnishingstatus.value_counts()

# furnishingstatus
df.furnishingstatus.replace(['furnished','unfurnished','semi-furnished'],[1,0,2], inplace=True)

df.head()

"""# Observations:

1. Data Strength - 545
2. Number of Random Variables - 13
3. None of the columns contains Null Values
4. Columns - price	area	bedrooms	bathrooms	stories,parking has numerical values
5. Columns - mainroad	guestroom	basement	hotwaterheating	airconditioning, prefarea	furnishingstatus has object values

# Manipulation:

1. Changed the categorical values to numerical values for the columns (mainroad	guestroom	basement	hotwaterheating	airconditioning, prefarea	furnishingstatus)
"""

df.dtypes

df.describe()

df.corr()

plt.figure(figsize=(10,10))
sns.heatmap(df.corr(), annot=True, cmap='Greens')

plt.scatter(df.area, df.price)

sns.pairplot(df)

plt.figure(figsize=(50,50))
df.boxplot()

df[['area']].boxplot()

df[['bedrooms']].boxplot()

df[['mainroad']].boxplot()

# How many values are there where bedrooms is more than 4
len(df.bedrooms.loc[df.bedrooms > 4])

len(df.mainroad.loc[df.mainroad == 0])

sns.histplot(df.price)

df.head()

df.basement.value_counts().plot.bar()

# What is the price of the house where bedrooms are 4 and bathroom is 2 - DA | ML
df.loc[df.bedrooms == 4,['price','bedrooms','bathrooms']][df.bathrooms == 2]

min - max 
avg()

"""# Splitting the dataset"""

df.head(2)

X = df.drop('price', axis=1)
y = df.price

df.price.ndim

df.drop('price', axis=1).ndim

df[df.columns[1:]]

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)

len(X_train)

len(X_test)

len(y_train)

len(y_test)

"""# Choosing the model"""

model = LinearRegression()

"""# Fitting/Training the model"""

model.fit(X_train, y_train)

# Intercept Value (Cost Function)
model.intercept_

# Coefficient Value
model.coef_

y = c + m(1)x(1) + ... + m(n)x(n)

"""# Prediction"""

y_test

pred_y = model.predict(X_test)

pred_y

newdf = pd.DataFrame({"Actual Value":y_test, "Predicted Value":pred_y})

newdf

plt.scatter(newdf['Actual Value'], newdf['Predicted Value'])
plt.xlabel('Actual Value')
plt.ylabel('Predicted Value')
plt.title('Actual V/s Predicted')

newdf.corr()

sns.heatmap(newdf.corr(), annot =True, cmap='magma')

1 - Perfect P
0.99 - 0.79 - Strong P
0.79 - 0.5 - Moderate P
0.5 - 0.3 - Low P
0.3 - 0 - Extremely Low P
0 - -0.3 - Extremely Low N
-0.3 - -0.5 - Low N
-0.5 - -0.79 - Moderate N
-0.79 - -0.99 - Strong N
-1 - Perfect N

# Simple Linear Regression
plt.scatter(X_test.area,y_test)
plt.plot(X_test.area,pred_y, color='red')

a = int(input("Enter the area: "))

b = model.predict([a, ____, _____, ___])

print(b)

"""# Testing the model performance"""

r2_score(y_test, pred_y)

plt.scatter(y_test, pred_y)
plt.plot(y,y, c='r')
plt.title('Best Fit Line (Actual Value V/s Predicted Value)')
plt.xlabel('Actual Value')
plt.ylabel('Predicted Value')